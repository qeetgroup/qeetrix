import fs from "fs";
import path from "path";

// CONFIG
const ICONS_DIR = path.resolve(__dirname, "../icons"); // points to src/icons
const OUTPUT_FILE = path.resolve(__dirname, "../index.ts");
const EXT = ".svg";

// Recursive function to get all SVG files with their relative path from ICONS_DIR
function getAllSvgFiles(dir: string, prefix = ""): string[] {
  const entries = fs.readdirSync(dir, { withFileTypes: true });
  const files: string[] = [];

  for (const entry of entries) {
    if (entry.name === ".DS_Store") continue; // ignore macOS files
    const fullPath = path.join(dir, entry.name);
    const relPath = path.join(prefix, entry.name);
    if (entry.isDirectory()) {
      files.push(...getAllSvgFiles(fullPath, relPath));
    } else if (path.extname(entry.name) === EXT) {
      files.push(relPath.replace(/\\/g, "/")); // normalize slashes
    }
  }
  return files;
}

// Convert kebab-case filename to PascalCase
function toPascalCase(filename: string) {
  return filename
    .replace(/\.svg$/i, "")
    .split("-")
    .map((word) => word.charAt(0).toUpperCase() + word.slice(1))
    .join("");
}

// Main generation
const svgFiles = getAllSvgFiles(ICONS_DIR);

let indexContent = "// Auto-generated by generate.ts\n\n";

svgFiles.forEach((filePath) => {
  // Extract style folder from path (first folder inside icons/)
  const parts = filePath.split("/");
  const styleFolder = parts[0]!; // e.g., 'outlined', 'filled'
  const baseName = toPascalCase(path.basename(filePath));
  const styleName = styleFolder.charAt(0).toUpperCase() + styleFolder.slice(1); // 'Outlined'
  const exportName = `${baseName}${styleName}`; // ArrowRightOutlined

  indexContent += `export { default as ${exportName} } from './${filePath}';\n`;
});

// Write index.ts
fs.writeFileSync(OUTPUT_FILE, indexContent);

console.log(`âœ… index.ts generated with ${svgFiles.length} icons.`);
